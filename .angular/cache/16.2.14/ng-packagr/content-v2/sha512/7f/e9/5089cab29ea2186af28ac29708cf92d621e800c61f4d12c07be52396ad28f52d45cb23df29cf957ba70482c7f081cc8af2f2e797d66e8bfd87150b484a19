{"hash":"5e35b39428a8a06ddfe9d2cf5b828288dd6c4ffd","fesm2022":[{"exports":["NgxValidationHandlingComponent","NgxValidationHandlingModule","NgxValidationHandlingService"],"facadeModuleId":"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling.service.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling-maintain.service.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\ngx-validation-handling.module.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\public-api.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs"],"name":"ngx-validation-handling","type":"chunk","dynamicImports":[],"fileName":"ngx-validation-handling.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Component","Input","NgModule"],"@angular/forms":["FormGroup","NgForm","AbstractControl","NgModel"],"@angular/common":["*","CommonModule"]},"imports":["@angular/core","@angular/forms","@angular/common"],"modules":{"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling.service.mjs":{"code":"class NgxValidationHandlingService {\n    setValidationHandling(form, ValidationMessages) {\n        this.form = form;\n        this.ValidationMessages = ValidationMessages || {};\n    }\n    getValidationMessages() {\n        return this.ValidationMessages;\n    }\n    getForm() {\n        return this.form;\n    }\n    static { this.ɵfac = function NgxValidationHandlingService_Factory(t) { return new (t || NgxValidationHandlingService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingService, factory: NgxValidationHandlingService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":2848,"removedExports":[],"renderedExports":["NgxValidationHandlingService"],"renderedLength":849},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling-maintain.service.mjs":{"code":"class NgxValidationHandlingMaintainService {\n    constructor(ngxValidationHandlingService) {\n        this.ngxValidationHandlingService = ngxValidationHandlingService;\n    }\n    getErrorMessage(controlName) {\n        const form = this.ngxValidationHandlingService.getForm();\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n        if (!form) {\n            console.log('ss');\n            return 'Invalid field';\n        }\n        let control = null;\n        if (form instanceof FormGroup) {\n            control = form.get(controlName);\n        }\n        else if (form instanceof NgForm) {\n            control = form.controls[controlName];\n        }\n        if (control) {\n            if (control instanceof AbstractControl) {\n                console.log('AbstractControl', control);\n                // Handling for reactive forms\n                if (control.errors && control.touched) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            return validationMessages[errorKey] || 'Invalid field';\n                        }\n                    }\n                }\n            }\n            else if (control instanceof NgModel) {\n                console.log('NgModel', control);\n                // Handling for template-driven forms\n                if (control.invalid && (control.dirty || control.touched)) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            return validationMessages[errorKey] || 'Invalid field';\n                        }\n                    }\n                }\n            }\n        }\n        return '';\n    }\n    static { this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) { return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingMaintainService, factory: NgxValidationHandlingMaintainService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: NgxValidationHandlingService }]; }, null); })();","originalLength":8144,"removedExports":[],"renderedExports":["NgxValidationHandlingMaintainService"],"renderedLength":2472},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.mjs":{"code":"function NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage : ctx_r1.errorMessage, \" \");\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n} }\nclass NgxValidationHandlingComponent {\n    constructor(ngxValidationHandlingMaintainService, cdr) {\n        this.ngxValidationHandlingMaintainService = ngxValidationHandlingMaintainService;\n        this.cdr = cdr;\n        this.style = {}; // Optional, for custom styling\n        this.errorMessage = '';\n    }\n    ngOnInit() {\n        this.setErrorMessage();\n    }\n    ngOnChanges(changes) {\n        if (changes['controlName']) {\n            this.setErrorMessage();\n        }\n    }\n    setErrorMessage() {\n        this.errorMessage = this.ngxValidationHandlingMaintainService.getErrorMessage(this.controlName);\n        this.cdr.detectChanges(); // Explicitly trigger change detection\n    }\n    static { this.ɵfac = function NgxValidationHandlingComponent_Factory(t) { return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgxValidationHandlingComponent, selectors: [[\"ngx-validation-handling\"]], inputs: { controlName: \"controlName\", fieldName: \"fieldName\", style: \"style\" }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]], template: function NgxValidationHandlingComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n        } }, dependencies: [i2.NgIf, i2.NgStyle], encapsulation: 2 }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-validation-handling',\n                template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\" *ngIf=\"errorMessage !== ''\" class=\"error-message\">\r\n        {{ fieldName ? fieldName + ' ' + errorMessage : errorMessage }}\r\n      </label>\r\n    </ng-container>\r\n  `,\n            }]\n    }], function () { return [{ type: NgxValidationHandlingMaintainService }, { type: i0.ChangeDetectorRef }]; }, { controlName: [{\n            type: Input\n        }], fieldName: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }] }); })();","originalLength":7006,"removedExports":[],"renderedExports":["NgxValidationHandlingComponent"],"renderedLength":3253},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\ngx-validation-handling.module.mjs":{"code":"class NgxValidationHandlingModule {\n    static { this.ɵfac = function NgxValidationHandlingModule_Factory(t) { return new (t || NgxValidationHandlingModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxValidationHandlingModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxValidationHandlingComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    NgxValidationHandlingComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, { declarations: [NgxValidationHandlingComponent], imports: [CommonModule], exports: [NgxValidationHandlingComponent] }); })();","originalLength":2815,"removedExports":[],"renderedExports":["NgxValidationHandlingModule"],"renderedLength":1081},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of ngx-validation-handling\n */","originalLength":1036,"removedExports":[],"renderedExports":[],"renderedLength":55},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":548,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { FormGroup, NgForm, AbstractControl, NgModel } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxValidationHandlingService {\n    setValidationHandling(form, ValidationMessages) {\n        this.form = form;\n        this.ValidationMessages = ValidationMessages || {};\n    }\n    getValidationMessages() {\n        return this.ValidationMessages;\n    }\n    getForm() {\n        return this.form;\n    }\n    static { this.ɵfac = function NgxValidationHandlingService_Factory(t) { return new (t || NgxValidationHandlingService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingService, factory: NgxValidationHandlingService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nclass NgxValidationHandlingMaintainService {\n    constructor(ngxValidationHandlingService) {\n        this.ngxValidationHandlingService = ngxValidationHandlingService;\n    }\n    getErrorMessage(controlName) {\n        const form = this.ngxValidationHandlingService.getForm();\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n        if (!form) {\n            console.log('ss');\n            return 'Invalid field';\n        }\n        let control = null;\n        if (form instanceof FormGroup) {\n            control = form.get(controlName);\n        }\n        else if (form instanceof NgForm) {\n            control = form.controls[controlName];\n        }\n        if (control) {\n            if (control instanceof AbstractControl) {\n                console.log('AbstractControl', control);\n                // Handling for reactive forms\n                if (control.errors && control.touched) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            return validationMessages[errorKey] || 'Invalid field';\n                        }\n                    }\n                }\n            }\n            else if (control instanceof NgModel) {\n                console.log('NgModel', control);\n                // Handling for template-driven forms\n                if (control.invalid && (control.dirty || control.touched)) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            return validationMessages[errorKey] || 'Invalid field';\n                        }\n                    }\n                }\n            }\n        }\n        return '';\n    }\n    static { this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) { return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingMaintainService, factory: NgxValidationHandlingMaintainService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: NgxValidationHandlingService }]; }, null); })();\n\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage : ctx_r1.errorMessage, \" \");\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n} }\nclass NgxValidationHandlingComponent {\n    constructor(ngxValidationHandlingMaintainService, cdr) {\n        this.ngxValidationHandlingMaintainService = ngxValidationHandlingMaintainService;\n        this.cdr = cdr;\n        this.style = {}; // Optional, for custom styling\n        this.errorMessage = '';\n    }\n    ngOnInit() {\n        this.setErrorMessage();\n    }\n    ngOnChanges(changes) {\n        if (changes['controlName']) {\n            this.setErrorMessage();\n        }\n    }\n    setErrorMessage() {\n        this.errorMessage = this.ngxValidationHandlingMaintainService.getErrorMessage(this.controlName);\n        this.cdr.detectChanges(); // Explicitly trigger change detection\n    }\n    static { this.ɵfac = function NgxValidationHandlingComponent_Factory(t) { return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgxValidationHandlingComponent, selectors: [[\"ngx-validation-handling\"]], inputs: { controlName: \"controlName\", fieldName: \"fieldName\", style: \"style\" }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]], template: function NgxValidationHandlingComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n        } }, dependencies: [i2.NgIf, i2.NgStyle], encapsulation: 2 }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-validation-handling',\n                template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\" *ngIf=\"errorMessage !== ''\" class=\"error-message\">\r\n        {{ fieldName ? fieldName + ' ' + errorMessage : errorMessage }}\r\n      </label>\r\n    </ng-container>\r\n  `,\n            }]\n    }], function () { return [{ type: NgxValidationHandlingMaintainService }, { type: i0.ChangeDetectorRef }]; }, { controlName: [{\n            type: Input\n        }], fieldName: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }] }); })();\n\nclass NgxValidationHandlingModule {\n    static { this.ɵfac = function NgxValidationHandlingModule_Factory(t) { return new (t || NgxValidationHandlingModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxValidationHandlingModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxValidationHandlingComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    NgxValidationHandlingComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, { declarations: [NgxValidationHandlingComponent], imports: [CommonModule], exports: [NgxValidationHandlingComponent] }); })();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };\n//# sourceMappingURL=ngx-validation-handling.mjs.map\n","map":null,"preliminaryFileName":"ngx-validation-handling.mjs","sourcemapFileName":"ngx-validation-handling.mjs.map"},{"fileName":"ngx-validation-handling.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngx-validation-handling.mjs\",\"sources\":[\"../../../projects/ngx-validation-handling/src/lib/services/ngx-validation-handling.service.ts\",\"../../../projects/ngx-validation-handling/src/lib/services/ngx-validation-handling-maintain.service.ts\",\"../../../projects/ngx-validation-handling/src/lib/components/ngx-validation-handling/ngx-validation-handling.component.ts\",\"../../../projects/ngx-validation-handling/src/lib/ngx-validation-handling.module.ts\",\"../../../projects/ngx-validation-handling/src/public-api.ts\",\"../../../projects/ngx-validation-handling/src/ngx-validation-handling.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\r\\nimport { FormGroup, NgForm } from '@angular/forms';\\r\\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: 'root'\\r\\n})\\r\\nexport class NgxValidationHandlingService {\\r\\n  private form!: FormGroup | NgForm;\\r\\n  private ValidationMessages!: ValidationMessages;\\r\\n\\r\\n  setValidationHandling(form: FormGroup | NgForm, ValidationMessages?: ValidationMessages): void {\\r\\n    this.form = form;\\r\\n    this.ValidationMessages = ValidationMessages || {};\\r\\n  }\\r\\n  getValidationMessages(): ValidationMessages {\\r\\n    return this.ValidationMessages;\\r\\n  }\\r\\n  getForm(): FormGroup | NgForm {\\r\\n    return this.form;\\r\\n  }\\r\\n}\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl, FormGroup, NgForm, NgModel, ValidationErrors } from '@angular/forms';\\r\\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\\r\\n\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class NgxValidationHandlingMaintainService {\\r\\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService) { }\\r\\n    getErrorMessage(controlName: string): string {\\r\\n        const form = this.ngxValidationHandlingService.getForm();\\r\\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\\r\\n    \\r\\n        if (!form ) {\\r\\n            console.log('ss');\\r\\n            return 'Invalid field';\\r\\n        }\\r\\n    \\r\\n        let control: AbstractControl | NgModel | null = null;\\r\\n    \\r\\n        if (form instanceof FormGroup) {\\r\\n            control = form.get(controlName);\\r\\n        } else if (form instanceof NgForm) {\\r\\n            control = form.controls[controlName] as unknown  as NgModel;\\r\\n        }\\r\\n    \\r\\n        if (control) {\\r\\n            if (control instanceof AbstractControl) {\\r\\n                console.log('AbstractControl',control);\\r\\n\\r\\n                // Handling for reactive forms\\r\\n                if (control.errors && control.touched) {\\r\\n                    for (const errorKey in control.errors) {\\r\\n                        if (control.errors.hasOwnProperty(errorKey)) {\\r\\n                            return validationMessages[errorKey] || 'Invalid field';\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } else if (control instanceof NgModel) {\\r\\n                console.log('NgModel',control);\\r\\n                \\r\\n                // Handling for template-driven forms\\r\\n                if (control.invalid && (control.dirty || control.touched)) {\\r\\n                    for (const errorKey in control.errors) {\\r\\n                        if (control.errors.hasOwnProperty(errorKey)) {\\r\\n                            return validationMessages[errorKey] || 'Invalid field';\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return '';\\r\\n    }\\r\\n    \\r\\n    \\r\\n}\\r\\n\",\"import { Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\\r\\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\\r\\nimport { ChangeDetectorRef } from '@angular/core';\\r\\n\\r\\n@Component({\\r\\n  selector: 'ngx-validation-handling',\\r\\n  template: `\\r\\n    <ng-container *ngIf=\\\"controlName\\\">\\r\\n      <label [ngStyle]=\\\"style\\\" *ngIf=\\\"errorMessage !== ''\\\" class=\\\"error-message\\\">\\r\\n        {{ fieldName ? fieldName + ' ' + errorMessage : errorMessage }}\\r\\n      </label>\\r\\n    </ng-container>\\r\\n  `,\\r\\n})\\r\\nexport class NgxValidationHandlingComponent implements OnInit, OnChanges {\\r\\n  @Input() controlName!: string;\\r\\n  @Input() fieldName!: string;\\r\\n  @Input() style: { [key: string]: string } = {}; // Optional, for custom styling\\r\\n\\r\\n  errorMessage: string = '';\\r\\n\\r\\n  constructor(\\r\\n    private ngxValidationHandlingMaintainService: NgxValidationHandlingMaintainService,\\r\\n    private cdr: ChangeDetectorRef\\r\\n  ) {}\\r\\n\\r\\n  ngOnInit() {\\r\\n    this.setErrorMessage();\\r\\n  }\\r\\n\\r\\n  ngOnChanges(changes: SimpleChanges) {\\r\\n    if (changes['controlName']) {\\r\\n      this.setErrorMessage();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private setErrorMessage() {\\r\\n    this.errorMessage = this.ngxValidationHandlingMaintainService.getErrorMessage(this.controlName);\\r\\n    this.cdr.detectChanges(); // Explicitly trigger change detection\\r\\n  }\\r\\n}\\r\\n\",\"import { NgModule } from '@angular/core';\\r\\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\\r\\nimport { CommonModule } from '@angular/common';\\r\\n\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [\\r\\n    NgxValidationHandlingComponent\\r\\n  ],\\r\\n  imports: [\\r\\n    CommonModule\\r\\n  ],\\r\\n  exports: [\\r\\n    NgxValidationHandlingComponent\\r\\n  ]\\r\\n})\\r\\nexport class NgxValidationHandlingModule { }\\r\\n\",\"/*\\r\\n * Public API Surface of ngx-validation-handling\\r\\n */\\r\\n\\r\\nexport * from './lib/services/ngx-validation-handling.service';\\r\\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\\r\\nexport * from './lib/ngx-validation-handling.module';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1.NgxValidationHandlingService\",\"i1.NgxValidationHandlingMaintainService\"],\"mappings\":\"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\"}","type":"asset"}]}