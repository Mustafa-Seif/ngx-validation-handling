{"hash":"33fede66b031012141bd0524b340e9ce3cbe5946","fesm2022":[{"exports":["NgxValidationHandlingComponent","NgxValidationHandlingModule","NgxValidationHandlingService"],"facadeModuleId":"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling.service.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling-maintain.service.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\ngx-validation-handling.module.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\interfaces\\Validation-error-handler.interface.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\interfaces\\Validation-messages.interface.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\public-api.mjs","D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs"],"name":"ngx-validation-handling","type":"chunk","dynamicImports":[],"fileName":"ngx-validation-handling.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Component","Input","NgModule"],"@angular/forms":["FormGroup","NgForm","AbstractControl","NgModel"],"@angular/common":["*","CommonModule"]},"imports":["@angular/core","@angular/forms","@angular/common"],"modules":{"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling.service.mjs":{"code":"class NgxValidationHandlingService {\n    setValidationHandling(form, ValidationMessages) {\n        this.form = form;\n        this.ValidationMessages = ValidationMessages || {};\n    }\n    getValidationMessages() {\n        return this.ValidationMessages;\n    }\n    getForm() {\n        return this.form;\n    }\n    static { this.ɵfac = function NgxValidationHandlingService_Factory(t) { return new (t || NgxValidationHandlingService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingService, factory: NgxValidationHandlingService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();","originalLength":2848,"removedExports":[],"renderedExports":["NgxValidationHandlingService"],"renderedLength":849},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\services\\ngx-validation-handling-maintain.service.mjs":{"code":"class NgxValidationHandlingMaintainService {\n    constructor(ngxValidationHandlingService) {\n        this.ngxValidationHandlingService = ngxValidationHandlingService;\n    }\n    getErrorMessage(controlName, customErrorHandler) {\n        const form = this.ngxValidationHandlingService.getForm();\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n        if (!form) {\n            return 'Invalid field';\n        }\n        let control = null;\n        if (form instanceof FormGroup) {\n            control = form.get(controlName);\n        }\n        else if (form instanceof NgForm) {\n            control = form.controls[controlName];\n        }\n        if (control) {\n            if (control instanceof AbstractControl) {\n                // Handling for reactive forms\n                if (control.errors && control.touched) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            if (customErrorHandler) {\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n                            }\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\n                        }\n                    }\n                }\n            }\n            else if (control instanceof NgModel) {\n                // Handling for template-driven forms\n                if (control.invalid && (control.dirty || control.touched)) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            if (customErrorHandler) {\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n                            }\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\n                        }\n                    }\n                }\n            }\n        }\n        return '';\n    }\n    static { this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) { return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingMaintainService, factory: NgxValidationHandlingMaintainService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: NgxValidationHandlingService }]; }, null); })();","originalLength":9305,"removedExports":[],"renderedExports":["NgxValidationHandlingMaintainService"],"renderedLength":2785},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.mjs":{"code":"function NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.className ? ctx_r1.className : \"error-message\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage.message : ctx_r1.errorMessage.message);\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_label_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.className ? ctx_r2.className : \"error-message\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.customErrorMessage.message);\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 4, \"label\", 1);\n    i0.ɵɵtemplate(2, NgxValidationHandlingComponent_ng_container_0_label_2_Template, 2, 4, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage.message !== \"\" && ctx_r0.errorMessage.message !== ctx_r0.customErrorMessage.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.customErrorMessage && ctx_r0.customErrorMessage.errorKey === ctx_r0.errorMessage.errorKey);\n} }\nclass NgxValidationHandlingComponent {\n    constructor(ngValidationMessagesMaintainService) {\n        this.ngValidationMessagesMaintainService = ngValidationMessagesMaintainService;\n        this.fieldName = '';\n        this.style = {};\n        this.className = '';\n    }\n    get errorMessage() {\n        return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName, this.customErrorHandler);\n    }\n    static { this.ɵfac = function NgxValidationHandlingComponent_Factory(t) { return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService)); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgxValidationHandlingComponent, selectors: [[\"ngx-validation-handling\"]], inputs: { controlName: \"controlName\", fieldName: \"fieldName\", style: \"style\", className: \"className\", customErrorMessage: \"customErrorMessage\", customErrorHandler: \"customErrorHandler\" }, decls: 1, vars: 1, consts: [[4, \"ngIf\"], [3, \"ngStyle\", \"class\", 4, \"ngIf\"], [3, \"ngStyle\"]], template: function NgxValidationHandlingComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n        } }, dependencies: [i2.NgIf, i2.NgStyle], styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:12px}\"] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-validation-handling', template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage.message !== '' && errorMessage.message !== customErrorMessage.message\" [class]=\"className?className:'error-message'\">{{ fieldName?fieldName+' '+errorMessage.message: errorMessage.message  }}</label>\r\n      <label [ngStyle]=\"style\"  *ngIf=\"customErrorMessage && customErrorMessage.errorKey === errorMessage.errorKey\" [class]=\"className?className:'error-message'\">{{ customErrorMessage.message }}</label>\r\n\r\n    </ng-container>\r\n  `, styles: [\".error-message{color:red;font-size:12px}\\n\"] }]\n    }], function () { return [{ type: NgxValidationHandlingMaintainService }]; }, { controlName: [{\n            type: Input,\n            args: [{ required: true }]\n        }], fieldName: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }], className: [{\n            type: Input\n        }], customErrorMessage: [{\n            type: Input\n        }], customErrorHandler: [{\n            type: Input\n        }] }); })();","originalLength":8467,"removedExports":[],"renderedExports":["NgxValidationHandlingComponent"],"renderedLength":4342},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\ngx-validation-handling.module.mjs":{"code":"class NgxValidationHandlingModule {\n    static { this.ɵfac = function NgxValidationHandlingModule_Factory(t) { return new (t || NgxValidationHandlingModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxValidationHandlingModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxValidationHandlingComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    NgxValidationHandlingComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, { declarations: [NgxValidationHandlingComponent], imports: [CommonModule], exports: [NgxValidationHandlingComponent] }); })();","originalLength":2815,"removedExports":[],"renderedExports":["NgxValidationHandlingModule"],"renderedLength":1081},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\interfaces\\Validation-error-handler.interface.mjs":{"code":"","originalLength":557,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\lib\\interfaces\\Validation-messages.interface.mjs":{"code":"","originalLength":625,"removedExports":[],"renderedExports":[],"renderedLength":0},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of ngx-validation-handling\n */","originalLength":1601,"removedExports":[],"renderedExports":[],"renderedLength":55},"D:\\MyProjects\\ngx-validation-handling\\dist\\ngx-validation-handling\\esm2022\\ngx-validation-handling.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":548,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { FormGroup, NgForm, AbstractControl, NgModel } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxValidationHandlingService {\n    setValidationHandling(form, ValidationMessages) {\n        this.form = form;\n        this.ValidationMessages = ValidationMessages || {};\n    }\n    getValidationMessages() {\n        return this.ValidationMessages;\n    }\n    getForm() {\n        return this.form;\n    }\n    static { this.ɵfac = function NgxValidationHandlingService_Factory(t) { return new (t || NgxValidationHandlingService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingService, factory: NgxValidationHandlingService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n\nclass NgxValidationHandlingMaintainService {\n    constructor(ngxValidationHandlingService) {\n        this.ngxValidationHandlingService = ngxValidationHandlingService;\n    }\n    getErrorMessage(controlName, customErrorHandler) {\n        const form = this.ngxValidationHandlingService.getForm();\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n        if (!form) {\n            return 'Invalid field';\n        }\n        let control = null;\n        if (form instanceof FormGroup) {\n            control = form.get(controlName);\n        }\n        else if (form instanceof NgForm) {\n            control = form.controls[controlName];\n        }\n        if (control) {\n            if (control instanceof AbstractControl) {\n                // Handling for reactive forms\n                if (control.errors && control.touched) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            if (customErrorHandler) {\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n                            }\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\n                        }\n                    }\n                }\n            }\n            else if (control instanceof NgModel) {\n                // Handling for template-driven forms\n                if (control.invalid && (control.dirty || control.touched)) {\n                    for (const errorKey in control.errors) {\n                        if (control.errors.hasOwnProperty(errorKey)) {\n                            if (customErrorHandler) {\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n                            }\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\n                        }\n                    }\n                }\n            }\n        }\n        return '';\n    }\n    static { this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) { return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService)); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgxValidationHandlingMaintainService, factory: NgxValidationHandlingMaintainService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: NgxValidationHandlingService }]; }, null); })();\n\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.className ? ctx_r1.className : \"error-message\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage.message : ctx_r1.errorMessage.message);\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_label_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.className ? ctx_r2.className : \"error-message\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.customErrorMessage.message);\n} }\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 4, \"label\", 1);\n    i0.ɵɵtemplate(2, NgxValidationHandlingComponent_ng_container_0_label_2_Template, 2, 4, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage.message !== \"\" && ctx_r0.errorMessage.message !== ctx_r0.customErrorMessage.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.customErrorMessage && ctx_r0.customErrorMessage.errorKey === ctx_r0.errorMessage.errorKey);\n} }\nclass NgxValidationHandlingComponent {\n    constructor(ngValidationMessagesMaintainService) {\n        this.ngValidationMessagesMaintainService = ngValidationMessagesMaintainService;\n        this.fieldName = '';\n        this.style = {};\n        this.className = '';\n    }\n    get errorMessage() {\n        return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName, this.customErrorHandler);\n    }\n    static { this.ɵfac = function NgxValidationHandlingComponent_Factory(t) { return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService)); }; }\n    static { this.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgxValidationHandlingComponent, selectors: [[\"ngx-validation-handling\"]], inputs: { controlName: \"controlName\", fieldName: \"fieldName\", style: \"style\", className: \"className\", customErrorMessage: \"customErrorMessage\", customErrorHandler: \"customErrorHandler\" }, decls: 1, vars: 1, consts: [[4, \"ngIf\"], [3, \"ngStyle\", \"class\", 4, \"ngIf\"], [3, \"ngStyle\"]], template: function NgxValidationHandlingComponent_Template(rf, ctx) { if (rf & 1) {\n            i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        } if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n        } }, dependencies: [i2.NgIf, i2.NgStyle], styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:12px}\"] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n        type: Component,\n        args: [{ selector: 'ngx-validation-handling', template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage.message !== '' && errorMessage.message !== customErrorMessage.message\" [class]=\"className?className:'error-message'\">{{ fieldName?fieldName+' '+errorMessage.message: errorMessage.message  }}</label>\r\n      <label [ngStyle]=\"style\"  *ngIf=\"customErrorMessage && customErrorMessage.errorKey === errorMessage.errorKey\" [class]=\"className?className:'error-message'\">{{ customErrorMessage.message }}</label>\r\n\r\n    </ng-container>\r\n  `, styles: [\".error-message{color:red;font-size:12px}\\n\"] }]\n    }], function () { return [{ type: NgxValidationHandlingMaintainService }]; }, { controlName: [{\n            type: Input,\n            args: [{ required: true }]\n        }], fieldName: [{\n            type: Input\n        }], style: [{\n            type: Input\n        }], className: [{\n            type: Input\n        }], customErrorMessage: [{\n            type: Input\n        }], customErrorHandler: [{\n            type: Input\n        }] }); })();\n\nclass NgxValidationHandlingModule {\n    static { this.ɵfac = function NgxValidationHandlingModule_Factory(t) { return new (t || NgxValidationHandlingModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxValidationHandlingModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxValidationHandlingComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    NgxValidationHandlingComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, { declarations: [NgxValidationHandlingComponent], imports: [CommonModule], exports: [NgxValidationHandlingComponent] }); })();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };\n//# sourceMappingURL=ngx-validation-handling.mjs.map\n","map":null,"preliminaryFileName":"ngx-validation-handling.mjs","sourcemapFileName":"ngx-validation-handling.mjs.map"},{"fileName":"ngx-validation-handling.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngx-validation-handling.mjs\",\"sources\":[\"../../../projects/ngx-validation-handling/src/lib/services/ngx-validation-handling.service.ts\",\"../../../projects/ngx-validation-handling/src/lib/services/ngx-validation-handling-maintain.service.ts\",\"../../../projects/ngx-validation-handling/src/lib/components/ngx-validation-handling/ngx-validation-handling.component.ts\",\"../../../projects/ngx-validation-handling/src/lib/ngx-validation-handling.module.ts\",\"../../../projects/ngx-validation-handling/src/public-api.ts\",\"../../../projects/ngx-validation-handling/src/ngx-validation-handling.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\r\\nimport { FormGroup, NgForm } from '@angular/forms';\\r\\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: 'root'\\r\\n})\\r\\nexport class NgxValidationHandlingService {\\r\\n  private form!: FormGroup | NgForm;\\r\\n  private ValidationMessages!: ValidationMessages;\\r\\n\\r\\n  setValidationHandling(form: FormGroup | NgForm, ValidationMessages?: ValidationMessages): void {\\r\\n    this.form = form;\\r\\n    this.ValidationMessages = ValidationMessages || {};\\r\\n  }\\r\\n  getValidationMessages(): ValidationMessages {\\r\\n    return this.ValidationMessages;\\r\\n  }\\r\\n  getForm(): FormGroup | NgForm {\\r\\n    return this.form;\\r\\n  }\\r\\n}\\r\\n\",\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl, FormGroup, NgForm, NgModel } from '@angular/forms';\\r\\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\\r\\nimport { ValidationErrorHandler } from '../interfaces/Validation-error-handler.interface';\\r\\nimport { customValidationError } from '../interfaces/custom-Validation-error.interface';\\r\\n\\r\\n\\r\\n@Injectable({\\r\\n    providedIn: 'root'\\r\\n})\\r\\nexport class NgxValidationHandlingMaintainService {\\r\\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService) { }\\r\\n    getErrorMessage(controlName: string, customErrorHandler: ValidationErrorHandler): customValidationError | string {\\r\\n        const form = this.ngxValidationHandlingService.getForm();\\r\\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\\r\\n\\r\\n        if (!form) {\\r\\n            return 'Invalid field';\\r\\n        }\\r\\n\\r\\n        let control: AbstractControl | NgModel | null = null;\\r\\n\\r\\n        if (form instanceof FormGroup) {\\r\\n            control = form.get(controlName);\\r\\n        } else if (form instanceof NgForm) {\\r\\n            control = form.controls[controlName] as unknown as NgModel;\\r\\n        }\\r\\n\\r\\n        if (control) {\\r\\n            if (control instanceof AbstractControl) {\\r\\n                // Handling for reactive forms\\r\\n                if (control.errors && control.touched) {\\r\\n                    for (const errorKey in control.errors) {\\r\\n                        if (control.errors.hasOwnProperty(errorKey)) {\\r\\n                            if (customErrorHandler) {\\r\\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\\r\\n                            }\\r\\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } else if (control instanceof NgModel) {\\r\\n                // Handling for template-driven forms\\r\\n                if (control.invalid && (control.dirty || control.touched)) {\\r\\n                    for (const errorKey in control.errors) {\\r\\n                        if (control.errors.hasOwnProperty(errorKey)) {\\r\\n                            if (customErrorHandler) {\\r\\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\\r\\n                            }\\r\\n                            return { message: validationMessages[errorKey], errorKey } || 'Invalid field';\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"import { Component, Input } from '@angular/core';\\r\\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\\r\\nimport { ValidationErrorHandler } from '../../interfaces/Validation-error-handler.interface';\\r\\nimport { customValidationError } from '../../interfaces/custom-Validation-error.interface';\\r\\n@Component({\\r\\n  selector: 'ngx-validation-handling',\\r\\n  template: `\\r\\n    <ng-container *ngIf=\\\"controlName\\\">\\r\\n      <label [ngStyle]=\\\"style\\\"  *ngIf=\\\"errorMessage.message !== '' && errorMessage.message !== customErrorMessage.message\\\" [class]=\\\"className?className:'error-message'\\\">{{ fieldName?fieldName+' '+errorMessage.message: errorMessage.message  }}</label>\\r\\n      <label [ngStyle]=\\\"style\\\"  *ngIf=\\\"customErrorMessage && customErrorMessage.errorKey === errorMessage.errorKey\\\" [class]=\\\"className?className:'error-message'\\\">{{ customErrorMessage.message }}</label>\\r\\n\\r\\n    </ng-container>\\r\\n  `,\\r\\n  styles: [\\r\\n    `\\r\\n    .error-message {\\r\\n      color: red;\\r\\n      font-size: 12px;\\r\\n    }\\r\\n  `\\r\\n  ],\\r\\n})\\r\\nexport class NgxValidationHandlingComponent {\\r\\n  @Input({ required: true }) controlName!: string;\\r\\n  @Input() fieldName: string = '';\\r\\n  @Input() style: { [key: string]: string } = {};\\r\\n  @Input() className: string = '';\\r\\n  @Input() customErrorMessage!: customValidationError;\\r\\n  @Input() customErrorHandler!: ValidationErrorHandler;\\r\\n\\r\\n  constructor(private ngValidationMessagesMaintainService: NgxValidationHandlingMaintainService) { }\\r\\n\\r\\n  get errorMessage(): any {\\r\\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName, this.customErrorHandler);\\r\\n  }\\r\\n}\\r\\n\",\"import { NgModule } from '@angular/core';\\r\\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\\r\\nimport { CommonModule } from '@angular/common';\\r\\n\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [\\r\\n    NgxValidationHandlingComponent\\r\\n  ],\\r\\n  imports: [\\r\\n    CommonModule\\r\\n  ],\\r\\n  exports: [\\r\\n    NgxValidationHandlingComponent\\r\\n  ]\\r\\n})\\r\\nexport class NgxValidationHandlingModule { }\\r\\n\",\"/*\\r\\n * Public API Surface of ngx-validation-handling\\r\\n */\\r\\n\\r\\nexport * from './lib/services/ngx-validation-handling.service';\\r\\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\\r\\nexport * from './lib/ngx-validation-handling.module';\\r\\nexport * from './lib/interfaces/Validation-error-handler.interface';\\r\\nexport * from './lib/interfaces/Validation-messages.interface';\\r\\nexport * from './lib/interfaces/Validation-messages.interface';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1.NgxValidationHandlingService\",\"i1.NgxValidationHandlingMaintainService\"],\"mappings\":\"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\"}","type":"asset"}]}