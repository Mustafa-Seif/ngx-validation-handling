{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport * as i2 from '@ngx-translate/core';\nimport * as i2$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nclass NgxValidationHandlingService {\n  getValidationMessages() {\n    return this.ValidationMessages;\n  }\n  getForm() {\n    return this.form;\n  }\n  setValidationMessages(form, ValidationMessages) {\n    this.form = form;\n    this.ValidationMessages = ValidationMessages || {\n      required: 'This field is required',\n      minlength: 'The value is too short',\n      maxlength: 'The value is too long',\n      email: 'Invalid email address'\n    };\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingService_Factory(t) {\n    return new (t || NgxValidationHandlingService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingService,\n    factory: NgxValidationHandlingService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxValidationHandlingMaintainService {\n  constructor(ngxValidationHandlingService, translateService) {\n    this.ngxValidationHandlingService = ngxValidationHandlingService;\n    this.translateService = translateService;\n  }\n  getErrorMessage(controlName) {\n    const form = this.ngxValidationHandlingService.getForm();\n    const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n    const control = form.get(controlName);\n    if (control && control.errors) {\n      const errors = control.errors;\n      for (const error in errors) {\n        if (form.controls[controlName].hasError(error) && form.controls[controlName].touched) {\n          return this.translateService.instant(validationMessages[error] || 'Invalid field');\n        }\n      }\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) {\n    return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService), i0.ɵɵinject(i2.TranslateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingMaintainService,\n    factory: NgxValidationHandlingMaintainService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingService\n    }, {\n      type: i2.TranslateService\n    }];\n  }, null);\n})();\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n  }\n}\nclass NgxValidationHandlingComponent {\n  constructor(ngValidationMessagesMaintainService) {\n    this.ngValidationMessagesMaintainService = ngValidationMessagesMaintainService;\n  }\n  get errorMessage() {\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName);\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingComponent_Factory(t) {\n    return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxValidationHandlingComponent,\n    selectors: [[\"ngx-validation-handling\"]],\n    inputs: {\n      controlName: \"controlName\",\n      style: \"style\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]],\n    template: function NgxValidationHandlingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n      }\n    },\n    dependencies: [i2$1.NgIf, i2$1.NgStyle],\n    styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:12px}\"]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-validation-handling',\n      template: `\n    <ng-container *ngIf=\"controlName\">\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ errorMessage }}</label>\n    </ng-container>\n  `,\n      styles: [\".error-message{color:red;font-size:12px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingMaintainService\n    }];\n  }, {\n    controlName: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxValidationHandlingModule {\n  static #_ = this.ɵfac = function NgxValidationHandlingModule_Factory(t) {\n    return new (t || NgxValidationHandlingModule)();\n  };\n  static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: NgxValidationHandlingModule\n  });\n  static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxValidationHandlingComponent],\n      imports: [CommonModule],\n      exports: [NgxValidationHandlingComponent]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, {\n    declarations: [NgxValidationHandlingComponent],\n    imports: [CommonModule],\n    exports: [NgxValidationHandlingComponent]\n  });\n})();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };","map":{"version":3,"names":["NgxValidationHandlingService","getValidationMessages","ValidationMessages","getForm","form","setValidationMessages","required","minlength","maxlength","email","_","_2","factory","ɵfac","providedIn","Injectable","args","NgxValidationHandlingMaintainService","constructor","ngxValidationHandlingService","translateService","getErrorMessage","controlName","validationMessages","control","get","errors","error","controls","hasError","touched","instant","i0","ɵɵinject","i2","TranslateService","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ctx_r1","style","ɵɵadvance","ɵɵtextInterpolate","errorMessage","ɵɵelementContainerStart","ɵɵtemplate","NgxValidationHandlingComponent_ng_container_0_label_1_Template","ɵɵelementContainerEnd","ctx_r0","NgxValidationHandlingComponent","ngValidationMessagesMaintainService","ɵɵdirectiveInject","selectors","inputs","decls","vars","consts","template","NgxValidationHandlingComponent_Template","rf","ctx","NgxValidationHandlingComponent_ng_container_0_Template","Component","selector","styles","Input","NgxValidationHandlingModule","_3","CommonModule","NgModule","declarations","imports","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling-maintain.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\ngx-validation-handling.module.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\public-api.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\ngx-validation-handling.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxValidationHandlingService {\n  private form!: FormGroup;\n  private ValidationMessages!: ValidationMessages;\n\n  getValidationMessages(): ValidationMessages {\n    return this.ValidationMessages;\n  }\n   getForm(): FormGroup {\n    return this.form;\n  }\n  public setValidationMessages(form: FormGroup, ValidationMessages?: ValidationMessages): void {\n    this.form = form;\n    this.ValidationMessages = ValidationMessages || {\n      required: 'This field is required',\n      minlength: 'The value is too short',\n      maxlength: 'The value is too long',\n      email: 'Invalid email address',\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingMaintainService {\r\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService, private translateService:TranslateService) { }\r\n    getErrorMessage(controlName: string): string {\r\n        const form = this.ngxValidationHandlingService.getForm();\r\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\r\n        const control = form.get(controlName);\r\n        if (control && control.errors) {\r\n            const errors: ValidationErrors = control.errors;\r\n            for (const error in errors) {\r\n                if (form.controls[controlName].hasError(error) &&\r\n                form.controls[controlName].touched) {\r\n                    return this.translateService.instant(validationMessages[error] || 'Invalid field') ;\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\n@Component({\n  selector: 'ngx-validation-handling',\n  template: `\n    <ng-container *ngIf=\"controlName\">\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ errorMessage }}</label>\n    </ng-container>\n  `,\n  styles: [\n    `\n    .error-message {\n      color: red;\n      font-size: 12px;\n    }\n  `\n  ],\n})\nexport class NgxValidationHandlingComponent {\n  @Input() controlName!: string;\n  @Input() style!: any;\n\n  constructor(private ngValidationMessagesMaintainService: NgxValidationHandlingMaintainService) { }\n\n  get errorMessage(): string {\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\nimport { CommonModule } from '@angular/common';\n@NgModule({\n  declarations: [\n    NgxValidationHandlingComponent\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    NgxValidationHandlingComponent\n  ],\n})\nexport class NgxValidationHandlingModule { }\n","/*\n * Public API Surface of ngx-validation-handling\n */\n\nexport * from './lib/services/ngx-validation-handling.service';\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\nexport * from './lib/ngx-validation-handling.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}