{"ast":null,"code":"// import { Component } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import {NgxValidationHandlingService} from 'ngx-validation-handling';\n// import { ValidationErrorHandler } from 'projects/ngx-validation-handling/src/lib/interfaces/Validation-error-handler.interface';\n// @Component({\n//   selector: 'app-root',\n//   templateUrl: './app.component.html',\n//   styleUrls: ['./app.component.scss']\n// })\n// export class AppComponent {\n//   form!:FormGroup;\n//   constructor(private fb:FormBuilder, private ngxValidationHandlingService:NgxValidationHandlingService){}\n//   ngOnInit(): void {\n//   this.form =  this.fb.group({\n//       fName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]],\n//       lName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]]\n//    })\n//     this.ngxValidationHandlingService.setValidationHandling(this.form,\n//       {\n//         required: 'This field is required',\n//         minlength: 'Minimum length should be 3',\n//         maxlength: 'Maximum length should be 10'\n//       }\n//     );\n//   }\n//   customErrorHandler(controlName: string, errorName: string, errorValue: any): string {\n//     if (errorName === 'required') {\n//       return 'cccc';\n//     }\n//     if (errorName === 'minlength') {\n//       return 'Minimum length should be 3';\n//     }\n//     if (errorName === 'maxlength') {\n//       return 'Maximum length should be 10';\n//     }\n//     return '';\n//   }\n// }\nimport { __decorate } from \"tslib\";\nimport { ViewChild } from \"@angular/core\";\n/////////////////\nexport class AppComponent {\n  // form!:FormGroup;\n  constructor(fb, ngxValidationHandlingService) {\n    this.fb = fb;\n    this.ngxValidationHandlingService = ngxValidationHandlingService;\n  }\n  ngOnInit() {\n    // this.form =  this.fb.group({\n    //     fName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]],\n    //     lName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]]\n    //  })\n  }\n  ngAfterViewInit() {\n    this.ngxValidationHandlingService.setValidationHandling(this.form, {\n      required: 'This field is required',\n      minlength: 'Minimum length should be 3',\n      maxlength: 'Maximum length should be 10'\n    });\n  }\n  submit(f) {\n    if (this.form.valid) {\n      console.log(this.form.value);\n    }\n  }\n}\n__decorate([ViewChild('form')], AppComponent.prototype, \"form\", void 0);","map":{"version":3,"names":["ViewChild","AppComponent","constructor","fb","ngxValidationHandlingService","ngOnInit","ngAfterViewInit","setValidationHandling","form","required","minlength","maxlength","submit","f","valid","console","log","value","__decorate"],"sources":["D:\\MyProjects\\ngx-validation-handling\\projects\\demo-app\\src\\app\\app.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n// import {NgxValidationHandlingService} from 'ngx-validation-handling';\r\n// import { ValidationErrorHandler } from 'projects/ngx-validation-handling/src/lib/interfaces/Validation-error-handler.interface';\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html',\r\n//   styleUrls: ['./app.component.scss']\r\n// })\r\n// export class AppComponent {\r\n//   form!:FormGroup;\r\n//   constructor(private fb:FormBuilder, private ngxValidationHandlingService:NgxValidationHandlingService){}\r\n//   ngOnInit(): void {\r\n//   this.form =  this.fb.group({\r\n//       fName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]],\r\n//       lName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]]\r\n//    })\r\n//     this.ngxValidationHandlingService.setValidationHandling(this.form,\r\n//       {\r\n//         required: 'This field is required',\r\n//         minlength: 'Minimum length should be 3',\r\n//         maxlength: 'Maximum length should be 10'\r\n//       }\r\n//     );\r\n//   }\r\n//   customErrorHandler(controlName: string, errorName: string, errorValue: any): string {\r\n//     if (errorName === 'required') {\r\n//       return 'cccc';\r\n//     }\r\n//     if (errorName === 'minlength') {\r\n//       return 'Minimum length should be 3';\r\n//     }\r\n//     if (errorName === 'maxlength') {\r\n//       return 'Maximum length should be 10';\r\n//     }\r\n//     return '';\r\n//   }\r\n// }\r\n\r\nimport { ViewChild } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\n\r\n\r\n\r\n/////////////////\r\n\r\n\r\n\r\n\r\nexport class AppComponent {\r\n  @ViewChild('form') form!:NgForm;\r\n  // form!:FormGroup;\r\n  constructor(private fb:FormBuilder, private ngxValidationHandlingService:NgxValidationHandlingService){}\r\n  ngOnInit(): void {\r\n  // this.form =  this.fb.group({\r\n  //     fName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]],\r\n  //     lName:['',[Validators.required,Validators.minLength(3),Validators.maxLength(10)]]\r\n  //  })\r\n    \r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.ngxValidationHandlingService.setValidationHandling(this.form,\r\n      {\r\n        required: 'This field is required',\r\n        minlength: 'Minimum length should be 3',\r\n        maxlength: 'Maximum length should be 10'\r\n      }\r\n    );\r\n    \r\n  }\r\n  submit(f:NgForm){\r\n    if(this.form.valid){\r\n\r\n      console.log(this.form.value)\r\n    }\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,QAAQ,eAAe;AAMzC;AAKA,OAAM,MAAOC,YAAY;EAEvB;EACAC,YAAoBC,EAAc,EAAUC,4BAAyD;IAAjF,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,4BAA4B,GAA5BA,4BAA4B;EAA+B;EACvGC,QAAQA,CAAA;IACR;IACA;IACA;IACA;EAAA;EAGAC,eAAeA,CAAA;IACb,IAAI,CAACF,4BAA4B,CAACG,qBAAqB,CAAC,IAAI,CAACC,IAAI,EAC/D;MACEC,QAAQ,EAAE,wBAAwB;MAClCC,SAAS,EAAE,4BAA4B;MACvCC,SAAS,EAAE;KACZ,CACF;EAEH;EACAC,MAAMA,CAACC,CAAQ;IACb,IAAG,IAAI,CAACL,IAAI,CAACM,KAAK,EAAC;MAEjBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,IAAI,CAACS,KAAK,CAAC;;EAEhC;;AAzBmBC,UAAA,EAAlBlB,SAAS,CAAC,MAAM,CAAC,C,yCAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}