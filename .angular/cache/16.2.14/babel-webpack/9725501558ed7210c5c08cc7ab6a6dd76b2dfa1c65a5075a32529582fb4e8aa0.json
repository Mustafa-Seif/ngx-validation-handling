{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { FormGroup, NgForm, AbstractControl, NgModel } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nclass NgxValidationHandlingService {\n  setValidationHandling(form, ValidationMessages) {\n    this.form = form;\n    this.ValidationMessages = ValidationMessages || {};\n  }\n  getValidationMessages() {\n    return this.ValidationMessages;\n  }\n  getForm() {\n    return this.form;\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingService_Factory(t) {\n    return new (t || NgxValidationHandlingService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingService,\n    factory: NgxValidationHandlingService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxValidationHandlingMaintainService {\n  constructor(ngxValidationHandlingService) {\n    this.ngxValidationHandlingService = ngxValidationHandlingService;\n  }\n  getErrorMessage(controlName) {\n    const form = this.ngxValidationHandlingService.getForm();\n    const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n    if (!form) {\n      console.log('ss');\n      return 'Invalid field';\n    }\n    let control = null;\n    if (form instanceof FormGroup) {\n      control = form.get(controlName);\n    } else if (form instanceof NgForm) {\n      control = form.controls[controlName];\n    }\n    if (control) {\n      if (control instanceof AbstractControl) {\n        console.log('AbstractControl', control);\n        // Handling for reactive forms\n        if (control.errors && control.touched) {\n          for (const errorKey in control.errors) {\n            if (control.errors.hasOwnProperty(errorKey)) {\n              return validationMessages[errorKey] || 'Invalid field';\n            }\n          }\n        }\n      } else if (control instanceof NgModel) {\n        console.log('NgModel', control);\n        // Handling for template-driven forms\n        if (control.invalid && (control.dirty || control.touched)) {\n          for (const errorKey in control.errors) {\n            if (control.errors.hasOwnProperty(errorKey)) {\n              return validationMessages[errorKey] || 'Invalid field';\n            }\n          }\n        }\n      }\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) {\n    return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingMaintainService,\n    factory: NgxValidationHandlingMaintainService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingService\n    }];\n  }, null);\n})();\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage : ctx_r1.errorMessage, \" \");\n  }\n}\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n  }\n}\nclass NgxValidationHandlingComponent {\n  constructor(ngxValidationHandlingMaintainService, cdr) {\n    this.ngxValidationHandlingMaintainService = ngxValidationHandlingMaintainService;\n    this.cdr = cdr;\n    this.style = {}; // Optional, for custom styling\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.setErrorMessage();\n  }\n  ngOnChanges(changes) {\n    if (changes['controlName']) {\n      this.setErrorMessage();\n    }\n  }\n  setErrorMessage() {\n    this.errorMessage = this.ngxValidationHandlingMaintainService.getErrorMessage(this.controlName);\n    this.cdr.detectChanges(); // Explicitly trigger change detection\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingComponent_Factory(t) {\n    return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxValidationHandlingComponent,\n    selectors: [[\"ngx-validation-handling\"]],\n    inputs: {\n      controlName: \"controlName\",\n      fieldName: \"fieldName\",\n      style: \"style\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]],\n    template: function NgxValidationHandlingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgStyle],\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-validation-handling',\n      template: `\n    <ng-container *ngIf=\"controlName\">\n      <label [ngStyle]=\"style\" *ngIf=\"errorMessage !== ''\" class=\"error-message\">\n        {{ fieldName ? fieldName + ' ' + errorMessage : errorMessage }}\n      </label>\n    </ng-container>\n  `\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingMaintainService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    controlName: [{\n      type: Input\n    }],\n    fieldName: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxValidationHandlingModule {\n  static #_ = this.ɵfac = function NgxValidationHandlingModule_Factory(t) {\n    return new (t || NgxValidationHandlingModule)();\n  };\n  static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: NgxValidationHandlingModule\n  });\n  static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxValidationHandlingComponent],\n      imports: [CommonModule],\n      exports: [NgxValidationHandlingComponent]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxValidationHandlingModule, {\n    declarations: [NgxValidationHandlingComponent],\n    imports: [CommonModule],\n    exports: [NgxValidationHandlingComponent]\n  });\n})();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };","map":{"version":3,"names":["NgxValidationHandlingService","setValidationHandling","form","ValidationMessages","getValidationMessages","getForm","_","_2","factory","ɵfac","providedIn","Injectable","args","NgxValidationHandlingMaintainService","constructor","ngxValidationHandlingService","getErrorMessage","controlName","validationMessages","console","log","control","FormGroup","get","NgForm","controls","AbstractControl","errors","touched","errorKey","hasOwnProperty","NgModel","invalid","dirty","i0","ɵɵinject","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ctx_r1","style","ɵɵadvance","ɵɵtextInterpolate1","fieldName","errorMessage","ɵɵelementContainerStart","ɵɵtemplate","NgxValidationHandlingComponent_ng_container_0_label_1_Template","ɵɵelementContainerEnd","ctx_r0","NgxValidationHandlingComponent","ngxValidationHandlingMaintainService","cdr","ngOnInit","setErrorMessage","ngOnChanges","changes","detectChanges","ɵɵdirectiveInject","ChangeDetectorRef","selectors","inputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","NgxValidationHandlingComponent_Template","rf","ctx","NgxValidationHandlingComponent_ng_container_0_Template","Component","selector","Input","NgxValidationHandlingModule","_3","CommonModule","NgModule","declarations","imports","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling-maintain.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\ngx-validation-handling.module.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\public-api.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\ngx-validation-handling.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormGroup, NgForm } from '@angular/forms';\r\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingService {\r\n  private form!: FormGroup | NgForm;\r\n  private ValidationMessages!: ValidationMessages;\r\n\r\n  setValidationHandling(form: FormGroup | NgForm, ValidationMessages?: ValidationMessages): void {\r\n    this.form = form;\r\n    this.ValidationMessages = ValidationMessages || {};\r\n  }\r\n  getValidationMessages(): ValidationMessages {\r\n    return this.ValidationMessages;\r\n  }\r\n  getForm(): FormGroup | NgForm {\r\n    return this.form;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormGroup, NgForm, NgModel, ValidationErrors } from '@angular/forms';\r\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingMaintainService {\r\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService) { }\r\n    getErrorMessage(controlName: string): string {\r\n        const form = this.ngxValidationHandlingService.getForm();\r\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\r\n    \r\n        if (!form ) {\r\n            console.log('ss');\r\n            return 'Invalid field';\r\n        }\r\n    \r\n        let control: AbstractControl | NgModel | null = null;\r\n    \r\n        if (form instanceof FormGroup) {\r\n            control = form.get(controlName);\r\n        } else if (form instanceof NgForm) {\r\n            control = form.controls[controlName] as unknown  as NgModel;\r\n        }\r\n    \r\n        if (control) {\r\n            if (control instanceof AbstractControl) {\r\n                console.log('AbstractControl',control);\r\n\r\n                // Handling for reactive forms\r\n                if (control.errors && control.touched) {\r\n                    for (const errorKey in control.errors) {\r\n                        if (control.errors.hasOwnProperty(errorKey)) {\r\n                            return validationMessages[errorKey] || 'Invalid field';\r\n                        }\r\n                    }\r\n                }\r\n            } else if (control instanceof NgModel) {\r\n                console.log('NgModel',control);\r\n                \r\n                // Handling for template-driven forms\r\n                if (control.invalid && (control.dirty || control.touched)) {\r\n                    for (const errorKey in control.errors) {\r\n                        if (control.errors.hasOwnProperty(errorKey)) {\r\n                            return validationMessages[errorKey] || 'Invalid field';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return '';\r\n    }\r\n    \r\n    \r\n}\r\n","import { Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-validation-handling',\r\n  template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\" *ngIf=\"errorMessage !== ''\" class=\"error-message\">\r\n        {{ fieldName ? fieldName + ' ' + errorMessage : errorMessage }}\r\n      </label>\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class NgxValidationHandlingComponent implements OnInit, OnChanges {\r\n  @Input() controlName!: string;\r\n  @Input() fieldName!: string;\r\n  @Input() style: { [key: string]: string } = {}; // Optional, for custom styling\r\n\r\n  errorMessage: string = '';\r\n\r\n  constructor(\r\n    private ngxValidationHandlingMaintainService: NgxValidationHandlingMaintainService,\r\n    private cdr: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setErrorMessage();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['controlName']) {\r\n      this.setErrorMessage();\r\n    }\r\n  }\r\n\r\n  private setErrorMessage() {\r\n    this.errorMessage = this.ngxValidationHandlingMaintainService.getErrorMessage(this.controlName);\r\n    this.cdr.detectChanges(); // Explicitly trigger change detection\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxValidationHandlingComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    NgxValidationHandlingComponent\r\n  ]\r\n})\r\nexport class NgxValidationHandlingModule { }\r\n","/*\r\n * Public API Surface of ngx-validation-handling\r\n */\r\n\r\nexport * from './lib/services/ngx-validation-handling.service';\r\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\r\nexport * from './lib/ngx-validation-handling.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}