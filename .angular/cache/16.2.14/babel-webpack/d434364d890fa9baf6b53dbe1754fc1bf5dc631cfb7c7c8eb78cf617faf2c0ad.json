{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { FormGroup, NgForm, AbstractControl, NgModel } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.fieldName ? ctx_r1.fieldName + \" \" + ctx_r1.errorMessage : ctx_r1.errorMessage);\n  }\n}\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n  }\n}\nclass NgxValidationHandlingService {\n  setValidationHandling(form, ValidationMessages) {\n    this.form = form;\n    this.ValidationMessages = ValidationMessages || {};\n  }\n  getValidationMessages() {\n    return this.ValidationMessages;\n  }\n  getForm() {\n    return this.form;\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingService_Factory(t) {\n    return new (t || NgxValidationHandlingService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingService,\n    factory: NgxValidationHandlingService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxValidationHandlingMaintainService {\n  constructor(ngxValidationHandlingService) {\n    this.ngxValidationHandlingService = ngxValidationHandlingService;\n  }\n  getErrorMessage(controlName, customErrorHandler) {\n    const form = this.ngxValidationHandlingService.getForm();\n    const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n    if (!form) {\n      return 'Invalid field';\n    }\n    let control = null;\n    if (form instanceof FormGroup) {\n      control = form.get(controlName);\n    } else if (form instanceof NgForm) {\n      control = form.controls[controlName];\n    }\n    if (control) {\n      if (control instanceof AbstractControl) {\n        // Handling for reactive forms\n        if (control.errors && control.touched) {\n          for (const errorKey in control.errors) {\n            if (control.errors.hasOwnProperty(errorKey)) {\n              if (customErrorHandler) {\n                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n              }\n              return validationMessages[errorKey] || 'Invalid field';\n            }\n          }\n        }\n      } else if (control instanceof NgModel) {\n        // Handling for template-driven forms\n        if (control.invalid && (control.dirty || control.touched)) {\n          for (const errorKey in control.errors) {\n            if (control.errors.hasOwnProperty(errorKey)) {\n              if (customErrorHandler) {\n                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\n              }\n              return validationMessages[errorKey] || 'Invalid field';\n            }\n          }\n        }\n      }\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) {\n    return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingMaintainService,\n    factory: NgxValidationHandlingMaintainService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingService\n    }];\n  }, null);\n})();\nclass NgxValidationHandlingComponent {\n  constructor(ngValidationMessagesMaintainService) {\n    this.ngValidationMessagesMaintainService = ngValidationMessagesMaintainService;\n    this.fieldName = '';\n    this.style = {};\n  }\n  get errorMessage() {\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName, this.customErrorHandler);\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingComponent_Factory(t) {\n    return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxValidationHandlingComponent,\n    selectors: [[\"ngx-validation-handling\"]],\n    inputs: {\n      controlName: \"controlName\",\n      fieldName: \"fieldName\",\n      style: \"style\",\n      customErrorHandler: \"customErrorHandler\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]],\n    template: function NgxValidationHandlingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgStyle],\n    styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:12px}\"]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-validation-handling',\n      template: `\n    <ng-container *ngIf=\"controlName\">\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ fieldName?fieldName+' '+errorMessage: errorMessage }}</label>\n    </ng-container>\n  `,\n      styles: [\".error-message{color:red;font-size:12px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingMaintainService\n    }];\n  }, {\n    controlName: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    fieldName: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    customErrorHandler: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxValidationHandlingModule {\n  static #_ = this.ɵfac = function NgxValidationHandlingModule_Factory(t) {\n    return new (t || NgxValidationHandlingModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxValidationHandlingModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxValidationHandlingComponent],\n      imports: [CommonModule],\n      exports: [NgxValidationHandlingComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };","map":{"version":3,"names":["NgxValidationHandlingService","setValidationHandling","form","ValidationMessages","getValidationMessages","getForm","_","_2","ɵprov","factory","ɵfac","providedIn","Injectable","args","NgxValidationHandlingMaintainService","constructor","ngxValidationHandlingService","getErrorMessage","controlName","customErrorHandler","validationMessages","control","FormGroup","get","NgForm","controls","AbstractControl","errors","touched","errorKey","hasOwnProperty","NgModel","invalid","dirty","NgxValidationHandlingComponent","ngValidationMessagesMaintainService","fieldName","style","errorMessage","ɵcmp","selectors","inputs","decls","vars","consts","template","NgxValidationHandlingComponent_Template","rf","ctx","i2","NgIf","NgStyle","styles","Component","selector","Input","required","NgxValidationHandlingModule","ɵmod","_3","ɵinj","CommonModule","NgModule","declarations","imports","exports"],"sources":["D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling-maintain.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\ngx-validation-handling.module.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\public-api.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\ngx-validation-handling.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormGroup, NgForm } from '@angular/forms';\r\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingService {\r\n  private form!: FormGroup | NgForm;\r\n  private ValidationMessages!: ValidationMessages;\r\n\r\n  setValidationHandling(form: FormGroup | NgForm, ValidationMessages?: ValidationMessages): void {\r\n    this.form = form;\r\n    this.ValidationMessages = ValidationMessages || {};\r\n  }\r\n  getValidationMessages(): ValidationMessages {\r\n    return this.ValidationMessages;\r\n  }\r\n  getForm(): FormGroup | NgForm {\r\n    return this.form;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormGroup, NgForm, NgModel, ValidationErrors } from '@angular/forms';\r\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\r\nimport { ValidationErrorHandler } from '../interfaces/Validation-error-handler.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingMaintainService {\r\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService) { }\r\n    getErrorMessage(controlName: string,customErrorHandler:ValidationErrorHandler): string {\r\n        const form = this.ngxValidationHandlingService.getForm();\r\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\r\n    \r\n        if (!form) {\r\n            return 'Invalid field';\r\n        }\r\n    \r\n        let control: AbstractControl | NgModel | null = null;\r\n    \r\n        if (form instanceof FormGroup) {\r\n            control = form.get(controlName);\r\n        } else if (form instanceof NgForm) {\r\n            control = form.controls[controlName] as unknown  as NgModel;\r\n        }\r\n    \r\n        if (control) {\r\n            if (control instanceof AbstractControl) {\r\n                // Handling for reactive forms\r\n                if (control.errors && control.touched) {\r\n                    for (const errorKey in control.errors) {\r\n                        if (control.errors.hasOwnProperty(errorKey)) {\r\n                            if (customErrorHandler) {\r\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\r\n                              }\r\n                            return validationMessages[errorKey] || 'Invalid field';\r\n                        }\r\n                    }\r\n                }\r\n            } else if (control instanceof NgModel) {\r\n                // Handling for template-driven forms\r\n                if (control.invalid && (control.dirty || control.touched)) {\r\n                    for (const errorKey in control.errors) {\r\n                        if (control.errors.hasOwnProperty(errorKey)) {\r\n                            if (customErrorHandler) {\r\n                                return customErrorHandler(controlName, errorKey, control.errors[errorKey]);\r\n                              }\r\n                            return validationMessages[errorKey] || 'Invalid field';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return '';\r\n    }\r\n    \r\n    \r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\r\nimport { ValidationErrorHandler } from '../../interfaces/Validation-error-handler.interface';\r\n@Component({\r\n  selector: 'ngx-validation-handling',\r\n  template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ fieldName?fieldName+' '+errorMessage: errorMessage }}</label>\r\n    </ng-container>\r\n  `,\r\n  styles: [\r\n    `\r\n    .error-message {\r\n      color: red;\r\n      font-size: 12px;\r\n    }\r\n  `\r\n  ],\r\n})\r\nexport class NgxValidationHandlingComponent {\r\n  @Input({ required: true }) controlName!: string;\r\n  @Input() fieldName: string = '';\r\n  @Input() style: { [key: string]: string } = {};\r\n  @Input() customErrorHandler!: ValidationErrorHandler;\r\n\r\n  constructor(private ngValidationMessagesMaintainService: NgxValidationHandlingMaintainService) { }\r\n\r\n  get errorMessage(): string {\r\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName, this.customErrorHandler);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxValidationHandlingComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    NgxValidationHandlingComponent\r\n  ]\r\n})\r\nexport class NgxValidationHandlingModule { }\r\n","/*\r\n * Public API Surface of ngx-validation-handling\r\n */\r\n\r\nexport * from './lib/services/ngx-validation-handling.service';\r\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\r\nexport * from './lib/ngx-validation-handling.module';\r\nexport * from './lib/interfaces/Validation-error-handler.interface';\r\nexport * from './lib/interfaces/Validation-messages.interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}