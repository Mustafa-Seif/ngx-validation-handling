{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction NgxValidationHandlingComponent_ng_container_0_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.style);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.errorMessage);\n  }\n}\nfunction NgxValidationHandlingComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxValidationHandlingComponent_ng_container_0_label_1_Template, 2, 2, \"label\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.errorMessage !== \"\");\n  }\n}\nclass NgxValidationHandlingService {\n  setValidationMessages(form, ValidationMessages) {\n    this.form = form;\n    this.ValidationMessages = ValidationMessages || {};\n  }\n  getValidationMessages() {\n    return this.ValidationMessages;\n  }\n  getForm() {\n    return this.form;\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingService_Factory(t) {\n    return new (t || NgxValidationHandlingService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingService,\n    factory: NgxValidationHandlingService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxValidationHandlingMaintainService {\n  constructor(ngxValidationHandlingService) {\n    this.ngxValidationHandlingService = ngxValidationHandlingService;\n  }\n  getErrorMessage(controlName) {\n    const form = this.ngxValidationHandlingService.getForm();\n    const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\n    if (!form || !validationMessages) {\n      return 'Invalid field';\n    }\n    const control = form.get(controlName);\n    if (control && control.errors && control.touched) {\n      for (const errorKey in control.errors) {\n        if (control.errors.hasOwnProperty(errorKey)) {\n          return validationMessages[errorKey] || 'Invalid field';\n        }\n      }\n    }\n    return '';\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingMaintainService_Factory(t) {\n    return new (t || NgxValidationHandlingMaintainService)(i0.ɵɵinject(NgxValidationHandlingService));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxValidationHandlingMaintainService,\n    factory: NgxValidationHandlingMaintainService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingMaintainService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingService\n    }];\n  }, null);\n})();\nclass NgxValidationHandlingComponent {\n  constructor(ngValidationMessagesMaintainService) {\n    this.ngValidationMessagesMaintainService = ngValidationMessagesMaintainService;\n  }\n  get errorMessage() {\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName);\n  }\n  static #_ = this.ɵfac = function NgxValidationHandlingComponent_Factory(t) {\n    return new (t || NgxValidationHandlingComponent)(i0.ɵɵdirectiveInject(NgxValidationHandlingMaintainService));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxValidationHandlingComponent,\n    selectors: [[\"ngx-validation-handling\"]],\n    inputs: {\n      controlName: \"controlName\",\n      style: \"style\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"error-message\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"error-message\", 3, \"ngStyle\"]],\n    template: function NgxValidationHandlingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxValidationHandlingComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.controlName);\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgStyle],\n    styles: [\".error-message[_ngcontent-%COMP%]{color:red;font-size:12px}\"]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-validation-handling',\n      template: `\n    <ng-container *ngIf=\"controlName\">\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ errorMessage }}</label>\n    </ng-container>\n  `,\n      styles: [\".error-message{color:red;font-size:12px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxValidationHandlingMaintainService\n    }];\n  }, {\n    controlName: [{\n      type: Input,\n      args: [{\n        required: true\n      }]\n    }],\n    style: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxValidationHandlingModule {\n  static #_ = this.ɵfac = function NgxValidationHandlingModule_Factory(t) {\n    return new (t || NgxValidationHandlingModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxValidationHandlingModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxValidationHandlingModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxValidationHandlingComponent],\n      imports: [CommonModule],\n      exports: [NgxValidationHandlingComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-validation-handling\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationHandlingComponent, NgxValidationHandlingModule, NgxValidationHandlingService };","map":{"version":3,"names":["NgxValidationHandlingService","setValidationMessages","form","ValidationMessages","getValidationMessages","getForm","_","_2","ɵprov","factory","ɵfac","providedIn","Injectable","args","NgxValidationHandlingMaintainService","constructor","ngxValidationHandlingService","getErrorMessage","controlName","validationMessages","control","get","errors","touched","errorKey","hasOwnProperty","NgxValidationHandlingComponent","ngValidationMessagesMaintainService","errorMessage","ɵcmp","selectors","inputs","style","decls","vars","consts","template","NgxValidationHandlingComponent_Template","rf","ctx","i2","NgIf","NgStyle","styles","Component","selector","Input","required","NgxValidationHandlingModule","ɵmod","_3","ɵinj","CommonModule","NgModule","declarations","imports","exports"],"sources":["D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\services\\ngx-validation-handling-maintain.service.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\components\\ngx-validation-handling\\ngx-validation-handling.component.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\lib\\ngx-validation-handling.module.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\public-api.ts","D:\\MyProjects\\ngx-validation-handling\\projects\\ngx-validation-handling\\src\\ngx-validation-handling.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ValidationMessages } from '../interfaces/Validation-messages.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingService {\r\n  private form!: FormGroup;\r\n  private ValidationMessages!: ValidationMessages;\r\n\r\n  setValidationMessages(form: FormGroup, ValidationMessages?: ValidationMessages): void {\r\n    this.form = form;\r\n    this.ValidationMessages = ValidationMessages || {};\r\n  }\r\n  getValidationMessages(): ValidationMessages {\r\n    return this.ValidationMessages;\r\n  }\r\n  getForm(): FormGroup {\r\n    return this.form;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { NgxValidationHandlingService } from './ngx-validation-handling.service';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxValidationHandlingMaintainService {\r\n    constructor(private ngxValidationHandlingService: NgxValidationHandlingService) { }\r\n    getErrorMessage(controlName: string): string {\r\n        const form = this.ngxValidationHandlingService.getForm();\r\n        const validationMessages = this.ngxValidationHandlingService.getValidationMessages();\r\n        if (!form || !validationMessages) {\r\n            return 'Invalid field';\r\n        }\r\n        const control = form.get(controlName);\r\n        if (control && control.errors && control.touched) {\r\n            for (const errorKey in control.errors) {\r\n                if (control.errors.hasOwnProperty(errorKey)) {\r\n                    return validationMessages[errorKey] || 'Invalid field';\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { NgxValidationHandlingMaintainService } from '../../services/ngx-validation-handling-maintain.service';\r\n@Component({\r\n  selector: 'ngx-validation-handling',\r\n  template: `\r\n    <ng-container *ngIf=\"controlName\">\r\n      <label [ngStyle]=\"style\"  *ngIf=\"errorMessage !== ''\" class=\"error-message\">{{ errorMessage }}</label>\r\n    </ng-container>\r\n  `,\r\n  styles: [\r\n    `\r\n    .error-message {\r\n      color: red;\r\n      font-size: 12px;\r\n    }\r\n  `\r\n  ],\r\n})\r\nexport class NgxValidationHandlingComponent {\r\n  @Input({required:true}) controlName!: string;\r\n  @Input() style!: any;\r\n\r\n  constructor(private ngValidationMessagesMaintainService: NgxValidationHandlingMaintainService) { }\r\n\r\n  get errorMessage(): string {\r\n    return this.ngValidationMessagesMaintainService.getErrorMessage(this.controlName);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxValidationHandlingComponent } from './components/ngx-validation-handling/ngx-validation-handling.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxValidationHandlingComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    NgxValidationHandlingComponent\r\n  ]\r\n})\r\nexport class NgxValidationHandlingModule { }\r\n","/*\r\n * Public API Surface of ngx-validation-handling\r\n */\r\n\r\nexport * from './lib/services/ngx-validation-handling.service';\r\nexport * from './lib/components/ngx-validation-handling/ngx-validation-handling.component';\r\nexport * from './lib/ngx-validation-handling.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}